(t/next-tick t/magic-seed 1)
(t/next-tick (t/next-tick t/magic-seed 1) 1)
(- (t/next-tick t/magic-seed 1) (t/next-tick (t/next-tick t/magic-seed 1) 1))
(def -1 (t/next-tick t/magic-seed 1))
(def a (t/next-tick t/magic-seed 1))
(def b (t/next-tick a 1))
(def c (t/next-tick b 1))
a
b
c
(- b a)
(- c b)
(- c a)
(t/next-tick-interval a 1)
(t/next-tick-interval b 1)
(t/next-twist a)
(t/next-twist b)
(Math/log (t/next-twist a))
(Math/log (t/next-twist b))
(* (Math/log (t/next-twist b)) -1 5)
(* (Math/log (t/next-twist c)) -1 5)
(* (Math/log (t/next-twist a)) -1 5)
(* (Math/log (t/next-twist a)) -1 20)
(* (Math/log (t/next-twist b)) -1 20)
(* (Math/log (t/next-twist c)) -1 20)
(import ec.util)
(import vendor.twister.ec.util
)
(java.util.Random)
(new java.util.Random)
(def j (new java.util.Random))
(j
)
(.next j)
(.nextBoolean j)
(.nextInt j)
(Math/log (.nextInt j))
(Math/log (Math/abs (.nextInt j)))
(Math/log (Math/abs (.nextLong j)))
(macroexpand '(-> seed (step-1) (step-2)))
(require '[now.rand :as r])
(r/get-int 1923000049)
 (r/get-int  1406331136)
(r/get-exp-int  1406331136 1)
(r/get-exp-int 1406331136 1)
(r/get-exp-int 1406331136 2)
(r/get-exp-int 1406331136 20)
(* (r/get-exp-int 1406331136 20) 60)
(* (r/get-exp-int 1406331136 1) 60)
lein run
(require '[now.rand :as r])
(t/get-next-tick t/ticks (t/current-time))
(first t/ticks)
(second t/ticks)
(nth 8 t/ticks)
(nth t/ticks 8)
(rest t/ticks)
(def rest-ticks (rest t/ticks))
(first rest-ticks)
(t/current-time)
(nth t/ticks 10000)
(nth t/ticks 100000)
(r/get-int (t/magic-seed))
(r/get-int t/magic-seed)
(Math/abs (r/get-int t/magic-seed))
(Math/abs -83)
(unchecked-dec (r/get-int t/magic-seed))
(int (r/get-ing t/magic-seed))
(int (r/get-int t/magic-seed))
(step-1 t/magic-seed)
(r/step-1 t/magic-seed)
(r/step-2 (r/step-1 t/magic-seed))
((r/step-2 (r/step-1 t/magic-seed)))
(float (r/step-2 (r/step-1 t/magic-seed)))
(double (r/step-2 (r/step-1 t/magic-seed)))
(require '[now.rand :as r :reload-all] '[now.core :reload-all])
(require '[now.rand :as r])
(first t/ticks)
(nth t/ticks 1000)
(nth t/ticks 10000)
(nth t/ticks 100000)
(nth t/ticks 60000)
(nth t/ticks 30000)
(nth t/ticks 15000)
(nth t/ticks 7500)
(nth t/ticks 900)
(nth t/ticks 9000)
(nth t/ticks 8000)
(nth t/ticks 7000)
(nth t/ticks 7500)
(nth t/ticks 7750)
(nth t/ticks 7850)
(nth t/ticks 7950)
(nth t/ticks 7870)
(r/get-exp-int t/magic-seed 1)
(r/get-exp-int (+ t/magic-seed 1) 1)
(r/get-exp-int (+ t/magic-seed 2) 1)
(r/get-exp-int (+ t/magic-seed 8900) 1)
(r/get-exp-int (+ t/magic-seed 90000) 1)
(r/get-exp-int (+ t/magic-seed 90004) 1)
(r/get-exp-int (+ t/magic-seed 900) 1)
(r/get-exp-int (+ t/magic-seed 9000) 1)
(r/get-exp-int (+ t/magic-seed 10000) 1)
(r/get-exp-int (+ t/magic-seed 11000) 1)
(r/get-exp-int (+ t/magic-seed 12000) 1)
(r/get-exp-int (+ t/magic-seed 14000) 1)
(r/get-exp-int (+ t/magic-seed 17000) 1)
(r/get-exp-int (+ t/magic-seed 17000) 2)
(r/get-exp-int (+ t/magic-seed 17001) 2)
(r/get-exp-int (+ t/magic-seed 17001) 20)
(r/get-exp-int (+ t/magic-seed 17000) 20)
(r/get-int 2884777372)
(r/get-int 38499922)
(r/get-int t/magic-seed)
(r/get-int (+ t/magic-seed 1))
(r/get-int (+ t/magic-seed 2))
(r/get-int (+ t/magic-seed 3))
(r/get-int (+ t/magic-seed 4))
(r/get-int (+ t/magic-seed 5))
(r/get-int (+ t/magic-seed 6))
(* -1 0.4556829343284571 1)
(* -1 0.4556829343284571 2)
(* -1 0.4556829343284571 3)
(* -1 1 0.4556829343284571)
(* -1 1 (Math/log 0.4556829343284571))
(* -1 1 (Math/log 0.6556829343284571))
(* -1 1 (Math/log 0.65568293434571))
(* -1 1 (Math/log 0.65293434571))
(* 60 (* -1 1 (Math/log 0.65293434571)))
(* 60 (* -1 1 (Math/log 0.65293432571)))
(* 60 (* -1 1 (Math/log 0.62293432571)))
(int (* 60 (* -1 1 (Math/log 0.62293432571))))
(int (* 60 (* -1 1 (Math/log 0.28993432571))))
(t/next-tick t/magic-seed 1)
(- (t/next-tick (t/next-tick t/magic-seed 1) (t/next-tick t/magic-seed 1))
)
(- (t/next-tick (t/next-tick t/magic-seed 1)) (t/next-tick t/magic-seed 1))
(- (t/next-tick (t/next-tick t/magic-seed 1) 1) (t/next-tick t/magic-seed 1))
(- (first t/ticks) (second t/ticks))
(- (third t/ticks) (second t/ticks))
(- (nth t/ticks 3) (second t/ticks))
(defn dif-between [x y] (- (nth t/ticks x) (nth t/ticks y)))
(dif-between 4 3)
(defn find-difs []
(loop [x 2 y 1]
(println (dif-between x y))
(recur (inc x) (inc y)))
)
(find-difs)
(mod (* r/IA t/magic-seed))
(mod (* r/IA t/magic-seed) r/IM)
(mod r/IM (* r/IA t/magic-seed))
(/ (mod (* r/IA t/magic-seed) r/IM) IM)
(/ (mod (* r/IA t/magic-seed) r/IM) r/IM)
(/ (mod r/IM (* r/IA t/magic-seed)) r/IM)
(/ r/IM (mod r/IM (* r/IA t/magic-seed)))
(require '[now.rand :as r])
(r/get-int t/magic-seed)
(double (r/get-int t/magic-seed))
(defn get-interval-for [x y]
(- (nth t/ticks x) (nth t/ticks y)))
(defn print-intervals []
(loop [x 2 y 1]
(println (get-interval-for x y)) (recur (inc x) (inc y))))
(print-intervals)
(def ts (t/get-infinite-ticks t/magic-seed 20))
(t/print-intervals)
(require '[now.timer :as t])
(t/print-intervals)
(require '[now.rand :as r])
(r/get-exp-int t/magic-seed 200)
(r/get-exp-int (+ t/magic-seed (r/get-exp-int t/magic-seed 200)) 200)
(r/step-1 t/magic-seed)
(r/step-1 (+ t/magic-seed 1))
(r/step-1 (+ t/magic-seed 2))
(r/step-1 (+ t/magic-seed 200))
(r/step-1 (- t/magic-seed 200))
(require '[now.rand :as r])
(r/step-1 (- t/magic-seed 200))
(r/step-1 (- t/magic-seed 201))
(r/step-1 (+ t/magic-seed 201))
(r/step-1 (+ t/magic-seed 501))
(r/step-1 (+ t/magic-seed 502))
(r/step-1 (+ t/magic-seed 503))
(t/print-intervals)
(Math/log (ran-int))
(Math/log (rand-int))
(find-doc rand-int)
(find-doc "rand-int")
(t/print-intervals)
